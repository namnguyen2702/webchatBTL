Tuy·ªát v·ªùi! M√¨nh s·∫Ω h∆∞·ªõng d·∫´n b·∫°n t·ª´ng d√≤ng chi ti·∫øt v√† c√≥ ch√∫ th√≠ch (comment) r√µ r√†ng cho b√†i th·ª±c h√†nh v·ªõi CSDL BTL. Ta s·∫Ω ch·ªçn b·∫£ng m·∫´u l√† Product ƒë·ªÉ tri·ªÉn khai ƒë·∫ßy ƒë·ªß:

üß± 1. T·∫°o Model: Product.cs
csharp
Sao ch√©p
Ch·ªânh s·ª≠a
using System.ComponentModel.DataAnnotations;

public class Product
{
    public int ProductId { get; set; }

    [Required(ErrorMessage = "T√™n s·∫£n ph·∫©m b·∫Øt bu·ªôc nh·∫≠p")]
    [StringLength(100, ErrorMessage = "T√™n kh√¥ng qu√° 100 k√Ω t·ª±")]
    public string Name { get; set; }

    [Range(0.01, 1000000, ErrorMessage = "Gi√° ph·∫£i l·ªõn h∆°n 0")]
    public decimal Price { get; set; }

    [StringLength(255, ErrorMessage = "M√¥ t·∫£ t·ªëi ƒëa 255 k√Ω t·ª±")]
    public string Description { get; set; }
}
üì¶ 2. Khai b√°o DbSet trong DbContext
Trong WebchatBTLDbContext.cs:

csharp
Sao ch√©p
Ch·ªânh s·ª≠a
public DbSet<Product> Products { get; set; }
üõ† 3. T·∫°o ProductController.cs trong Areas\Admin\Controllers
csharp
Sao ch√©p
Ch·ªânh s·ª≠a
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using webchatBTL.Models;

namespace webchatBTL.Areas.Admin.Controllers
{
    [Area("Admin")]
    public class ProductController : Controller
    {
        private readonly WebchatBTLDbContext _context;

        public ProductController(WebchatBTLDbContext context)
        {
            _context = context;
        }

        // ‚úÖ CHO M·ªåI NG∆Ø·ªúI XEM
        public async Task<IActionResult> Index()
        {
            var products = await _context.Products.ToListAsync(); // L·∫•y danh s√°ch s·∫£n ph·∫©m t·ª´ DB
            return View(products); // Truy·ªÅn sang View
        }

        // ‚úÖ CH·ªà ADMIN M·ªöI ƒê∆Ø·ª¢C TH√äM
        [Authorize(Roles = "Admin")]
        public IActionResult Create()
        {
            return View();
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Create(Product product)
        {
            if (ModelState.IsValid)
            {
                _context.Add(product); // Th√™m v√†o DB
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index)); // Quay l·∫°i danh s√°ch
            }
            return View(product); // N·∫øu l·ªói, quay l·∫°i form v·ªõi l·ªói validator
        }

        // ‚úÖ S·ª¨A - CH·ªà ADMIN
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Edit(int? id)
        {
            if (id == null) return NotFound();
            var product = await _context.Products.FindAsync(id);
            if (product == null) return NotFound();
            return View(product);
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Edit(int id, Product product)
        {
            if (id != product.ProductId) return NotFound();

            if (ModelState.IsValid)
            {
                _context.Update(product);
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(Index));
            }
            return View(product);
        }

        // ‚úÖ XO√Å - CH·ªà ADMIN
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> Delete(int? id)
        {
            if (id == null) return NotFound();
            var product = await _context.Products.FindAsync(id);
            if (product == null) return NotFound();
            return View(product);
        }

        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        [Authorize(Roles = "Admin")]
        public async Task<IActionResult> DeleteConfirmed(int id)
        {
            var product = await _context.Products.FindAsync(id);
            _context.Products.Remove(product);
            await _context.SaveChangesAsync();
            return RedirectToAction(nameof(Index));
        }
    }
}
üñº 4. View Index.cshtml ‚Äì Danh s√°ch s·∫£n ph·∫©m
cshtml
Sao ch√©p
Ch·ªânh s·ª≠a
@model IEnumerable<webchatBTL.Models.Product>

@{
    ViewData["Title"] = "Danh s√°ch s·∫£n ph·∫©m";
}

<h2>@ViewData["Title"]</h2>

@if (User.IsInRole("Admin"))
{
    <a asp-action="Create" class="btn btn-success">‚ûï Th√™m s·∫£n ph·∫©m</a>
}

<table class="table">
    <thead>
        <tr>
            <th>T√™n</th>
            <th>Gi√°</th>
            <th>M√¥ t·∫£</th>
            @if (User.IsInRole("Admin"))
            {
                <th>H√†nh ƒë·ªông</th>
            }
        </tr>
    </thead>
    <tbody>
    @foreach (var item in Model)
    {
        <tr>
            <td>@item.Name</td>
            <td>@item.Price</td>
            <td>@item.Description</td>
            @if (User.IsInRole("Admin"))
            {
                <td>
                    <a asp-action="Edit" asp-route-id="@item.ProductId">‚úèÔ∏è S·ª≠a</a> |
                    <a asp-action="Delete" asp-route-id="@item.ProductId">üóë Xo√°</a>
                </td>
            }
        </tr>
    }
    </tbody>
</table>
üß© 5. View Create.cshtml (form th√™m s·∫£n ph·∫©m)
cshtml
Sao ch√©p
Ch·ªânh s·ª≠a
@model webchatBTL.Models.Product

<h2>Th√™m s·∫£n ph·∫©m</h2>

<form asp-action="Create">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="form-group">
        <label asp-for="Name"></label>
        <input asp-for="Name" class="form-control" />
        <span asp-validation-for="Name" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Price"></label>
        <input asp-for="Price" class="form-control" />
        <span asp-validation-for="Price" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Description"></label>
        <textarea asp-for="Description" class="form-control"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-primary">L∆∞u</button>
</form>
üîê 6. Ph√¢n quy·ªÅn ng∆∞·ªùi d√πng (User ch·ªâ ƒë∆∞·ª£c xem)
Ng∆∞·ªùi c√≥ Role l√† "User":

V√†o ƒë∆∞·ª£c Index

Kh√¥ng ƒë∆∞·ª£c v√†o Create, Edit, Delete

Ki·ªÉm tra quy·ªÅn b·∫±ng:

csharp
Sao ch√©p
Ch·ªânh s·ª≠a
[Authorize(Roles = "Admin")] // Controller ho·∫∑c Action
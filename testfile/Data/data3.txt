// =============================
// Models/User.cs
// =============================

using System;
using System.ComponentModel.DataAnnotations;

namespace webchatBTL.Models
{
    public class User
    {
        public int UserId { get; set; } // M√£ ƒë·ªãnh danh ng∆∞·ªùi d√πng

        [Required] // B·∫Øt bu·ªôc nh·∫≠p
        public string FullName { get; set; } // T√™n ng∆∞·ªùi d√πng

        [Required, EmailAddress] // B·∫Øt bu·ªôc nh·∫≠p v√† ƒë√∫ng ƒë·ªãnh d·∫°ng email
        public string Email { get; set; }

        [Phone] // Ki·ªÉm tra ƒë·ªãnh d·∫°ng s·ªë ƒëi·ªán tho·∫°i
        public string Phone { get; set; }

        // ‚úÖ Y√™u c·∫ßu 2: Th√™m tr∆∞·ªùng VerifyKey v·ªõi validation theo ƒë·ªÅ b√†i
        [Required(ErrorMessage = "Vui l√≤ng nh·∫≠p VerifyKey")]
        [StringLength(10, ErrorMessage = "VerifyKey ph·∫£i ƒë√∫ng 10 k√Ω t·ª±")]
        [RegularExpression(@"^\d[A-Za-z0-9]{9}$", ErrorMessage = "Ph·∫£i b·∫Øt ƒë·∫ßu b·∫±ng s·ªë v√† ƒë√∫ng 10 k√Ω t·ª±")]
        public string VerifiKey { get; set; } // M√£ x√°c minh ng∆∞·ªùi d√πng
    }
}

// =============================
// Controllers/AdminUserController.cs
// =============================

using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using webchatBTL.Models;

namespace webchatBTL.Areas.Admin.Controllers
{
    [Area("Admin")]
    public class AdminUserController : Controller
    {
        private readonly WebchatBTLDbContext _context;

        public AdminUserController(WebchatBTLDbContext context)
        {
            _context = context; // Inject DbContext
        }

        // ‚úÖ Y√™u c·∫ßu 1: Hi·ªÉn th·ªã danh s√°ch ng∆∞·ªùi d√πng
        public async Task<IActionResult> ListCards()
        {
            var users = await _context.Users.ToListAsync(); // L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng t·ª´ DB
            return View(users); // Truy·ªÅn danh s√°ch sang View
        }

        // ‚úÖ Y√™u c·∫ßu 3: Hi·ªÉn th·ªã form t·∫°o user m·ªõi
        public IActionResult Create() => View();

        [HttpPost]
        public async Task<IActionResult> Create(User user)
        {
            if (ModelState.IsValid) // Ki·ªÉm tra h·ª£p l·ªá theo attribute trong model
            {
                _context.Add(user); // Th√™m v√†o DB
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(ListCards)); // Quay l·∫°i trang danh s√°ch
            }
            return View(user); // N·∫øu l·ªói, hi·ªÉn th·ªã l·∫°i form
        }

        // ‚úÖ S·ª≠a th√¥ng tin ng∆∞·ªùi d√πng
        public async Task<IActionResult> Edit(int id)
        {
            var user = await _context.Users.FindAsync(id); // T√¨m user theo id
            return View(user); // Truy·ªÅn ra form Edit
        }

        [HttpPost]
        public async Task<IActionResult> Edit(User user)
        {
            if (ModelState.IsValid)
            {
                _context.Update(user); // C·∫≠p nh·∫≠t th√¥ng tin user
                await _context.SaveChangesAsync();
                return RedirectToAction(nameof(ListCards));
            }
            return View(user);
        }
    }
}

// =============================
// Controllers/UserApiController.cs
// =============================

using Microsoft.AspNetCore.Mvc;
using webchatBTL.Models;

namespace webchatBTL.Controllers
{
    [Route("api/[controller]")]
    [ApiController] // API kh√¥ng tr·∫£ v·ªÅ View
    public class UserApiController : ControllerBase
    {
        private readonly WebchatBTLDbContext _context;

        public UserApiController(WebchatBTLDbContext context)
        {
            _context = context;
        }

        // ‚úÖ API xo√° user (y√™u c·∫ßu 4 - Fetch API)
        [HttpDelete("delete/{id}")]
        public IActionResult Delete(int id)
        {
            var user = _context.Users.Find(id); // T√¨m user theo id
            if (user == null) return NotFound(); // Kh√¥ng t√¨m th·∫•y

            _context.Users.Remove(user); // Xo√° kh·ªèi DB
            _context.SaveChanges();
            return Ok(new { success = true }); // Tr·∫£ v·ªÅ JSON success
        }
    }
}

// =============================
// Views/AdminUser/ListCards.cshtml
// =============================

@model IEnumerable<webchatBTL.Models.User>

@{
    ViewData["Title"] = "Danh s√°ch ng∆∞·ªùi d√πng";
}

<!-- Menu ngang ƒë·ªÉ ·∫©n view kh√°c -->
<ul class="nav nav-tabs mb-3">
    <li class="nav-item"><span class="nav-link active">Danh s√°ch ng∆∞·ªùi d√πng</span></li>
</ul>

<!-- Hi·ªÉn th·ªã c√°c b·∫£n ghi d∆∞·ªõi d·∫°ng card 3 c·ªôt desktop, 1 c·ªôt mobile -->
<div class="container">
    <div class="row">
        @foreach (var user in Model)
        {
            <div class="col-md-4 col-12 mb-3">
                <div class="card shadow-sm h-100">
                    <div class="card-body">
                        <h5>@user.FullName</h5>
                        <p>
                            Email: @user.Email<br />
                            Phone: @user.Phone<br />
                            VerifyKey: <strong>@user.VerifiKey</strong>
                        </p>
                        <a class="btn btn-sm btn-primary" asp-action="Edit" asp-route-id="@user.UserId">S·ª≠a</a>
                        <button class="btn btn-sm btn-danger" onclick="deleteUser(@user.UserId)">Xo√°</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
<script>
    // X√≥a b·∫±ng Fetch API
    function deleteUser(id) {
        if (confirm("B·∫°n c√≥ ch·∫Øc mu·ªën xo√° kh√¥ng?")) {
            fetch(`/api/userapi/delete/${id}`, { method: 'DELETE' })
                .then(res => res.json())
                .then(data => {
                    if (data.success) location.reload(); // T·∫£i l·∫°i n·∫øu xo√° th√†nh c√¥ng
                    else alert("Xo√° th·∫•t b·∫°i");
                });
        }
    }
</script>
} 

// =============================
// Views/AdminUser/Create.cshtml & Edit.cshtml
// =============================

@model webchatBTL.Models.User

@{
    ViewData["Title"] = "T·∫°o/S·ª≠a ng∆∞·ªùi d√πng";
}

<h2>@ViewData["Title"]</h2>

<form asp-action="@ViewContext.RouteData.Values["action"]">
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>

    <div class="form-group">
        <label asp-for="FullName"></label>
        <input asp-for="FullName" class="form-control" />
        <span asp-validation-for="FullName" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Email"></label>
        <input asp-for="Email" class="form-control" />
        <span asp-validation-for="Email" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="Phone"></label>
        <input asp-for="Phone" class="form-control" />
        <span asp-validation-for="Phone" class="text-danger"></span>
    </div>

    <div class="form-group">
        <label asp-for="VerifiKey"></label>
        <input asp-for="VerifiKey" class="form-control" />
        <span asp-validation-for="VerifiKey" class="text-danger"></span>
    </div>

    <button type="submit" class="btn btn-success">L∆∞u</button>
    <a asp-action="ListCards" class="btn btn-secondary">H·ªßy</a>
</form>


===========================================================
===========================================================
ƒë√¢y l√† c√°c b∆∞·ªõc ki·ªÉm tra v√† ch·∫°y th·ª≠ chi ti·∫øt ƒë·ªÉ ƒë·∫£m b·∫£o b√†i l√†m ƒë√∫ng, ƒë·ªß v√† kh√¥ng l·ªói (c·ª±c k·ª≥ quan tr·ªçng khi ƒëi thi/th·ª±c h√†nh):

‚úÖ B∆Ø·ªöC 1: Ch·∫°y l·∫°i migration n·∫øu ch∆∞a
bash
Sao ch√©p
Ch·ªânh s·ª≠a
dotnet ef migrations add AddVerifiKeyToUser
dotnet ef database update
üìå Ki·ªÉm tra trong SQL Server ho·∫∑c SSMS: b·∫£ng Users ph·∫£i c√≥ c·ªôt VerifiKey (ki·ªÉu nvarchar(10)).

‚úÖ B∆Ø·ªöC 2: Ki·ªÉm tra routing
V√†o Program.cs ho·∫∑c Startup.cs, ƒë·∫£m b·∫£o b·∫°n cho ph√©p route ƒë·∫øn area Admin:

csharp
Sao ch√©p
Ch·ªânh s·ª≠a
endpoints.MapControllerRoute(
    name: "areas",
    pattern: "{area:exists}/{controller=Home}/{action=Index}/{id?}");
üìå Sau ƒë√≥ th·ª≠ truy c·∫≠p:

arduino
Sao ch√©p
Ch·ªânh s·ª≠a
https://localhost:xxxx/Admin/AdminUser/ListCards
‚úÖ B∆Ø·ªöC 3: Ki·ªÉm tra giao di·ªán danh s√°ch
Giao di·ªán hi·ªÉn th·ªã ƒë√∫ng 3 b·∫£n ghi/h√†ng tr√™n desktop, 1 b·∫£n ghi tr√™n mobile

Ki·ªÉm tra xem c√≥ hi·ªÉn th·ªã ƒë√∫ng c√°c tr∆∞·ªùng: FullName, Email, Phone, VerifyKey

Ki·ªÉm tra n√∫t Xo√° c√≥ g·ªçi ƒë√∫ng Fetch API kh√¥ng

‚úÖ N·∫øu xo√° th√†nh c√¥ng ‚Üí d·ªØ li·ªáu b·ªã xo√° v√† reload trang.

‚úÖ B∆Ø·ªöC 4: T·∫°o v√† s·ª≠a User
Truy c·∫≠p:

pgsql
Sao ch√©p
Ch·ªânh s·ª≠a
https://localhost:xxxx/Admin/AdminUser/Create
Nh·∫≠p d·ªØ li·ªáu h·ª£p l·ªá, VerifiKey ƒë√∫ng ƒë·ªãnh d·∫°ng: 10 k√Ω t·ª±, b·∫Øt ƒë·∫ßu b·∫±ng s·ªë

‚ùå V√≠ d·ª• sai: abc1234567 ‚Üí b·ªã l·ªói (v√¨ kh√¥ng b·∫Øt ƒë·∫ßu b·∫±ng s·ªë)

‚úÖ V√≠ d·ª• ƒë√∫ng: 1abc234567

‚Üí N·∫øu l∆∞u th√†nh c√¥ng ‚Üí redirect v·ªÅ ListCards v√† hi·ªÉn th·ªã d·ªØ li·ªáu m·ªõi.

‚úÖ B∆Ø·ªöC 5: Ki·ªÉm tra valid VerifyKey
‚ùå Nh·∫≠p sai VerifyKey:
abc1234567 ‚Üí l·ªói Regex

1abc ‚Üí l·ªói StringLength

B·ªè tr·ªëng ‚Üí l·ªói Required

üëâ C√°c l·ªói n√†y ph·∫£i ƒë∆∞·ª£c hi·ªÉn th·ªã b√™n d∆∞·ªõi input (<span asp-validation-for="VerifiKey">)

‚úÖ B∆Ø·ªöC 6: Ki·ªÉm tra API xo√°
M·ªü DevTools > Network ‚Üí Khi nh·∫•n n√∫t Xo√°:

Ph·∫£i th·∫•y DELETE g·ªçi ƒë·∫øn /api/userapi/delete/{id}

K·∫øt qu·∫£ tr·∫£ v·ªÅ: { success: true }

N·∫øu success: false ho·∫∑c kh√¥ng reload ‚Üí ki·ªÉm tra Fetch trong JS

‚úÖ BONUS: Ki·ªÉm tra b·∫£o m·∫≠t c∆° b·∫£n
VerifiKey c√≥ b·ªã bypass kh√¥ng? (F12 ‚Üí s·ª≠a HTML ‚Üí g·ª≠i l·ªói?)

Ng∆∞·ªùi d√πng kh√¥ng ƒë∆∞·ª£c s·ª≠a UserId ng∆∞·ªùi kh√°c n·∫øu b·∫°n c√≥ check